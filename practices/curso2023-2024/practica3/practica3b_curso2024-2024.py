"""
Practica 3b: Ecuaci√≥n de Poisson en 3 dimensiones con aproximaci√≥n
adiab√°tica
"""
import numpy as np
import matplotlib.pyplot as plt

"""
Ejercicio 1: En esta pr√°ctica nos vamos a centrar en resolver la ecuaci√≥n de Poisson en una caja
tridimensional de lado ùêø = 1 m, con un espaciado de malla ùëé = 1 cm, en la que se han
colocado de forma alternada bloques de cargas positivas y negativas en las esquinas (ve√°se
esquema en la figura superior), que representan la densidad de carga ùúå del problema. Dichos
bloques los vamos a modelar como cubos de lado 25ùëé y carga constante de valor ¬±8, 85√ó10‚àí12
C m‚àí3.
Calcular el potencial el√©ctrico en la malla con una precisi√≥n de 5 √ó 10‚àí6 haciendo uso del
m√©todo de la relajaci√≥n.
"""
# Definimos constantes
L = 1.0  # longitud de la caja en metros
M = 100  # n√∫mero de cubos en cada lado
a = L / M  # tama√±o de los cubos de la malla

rho0 = 8.85e-12  # densidad de carga
epsilon0 = 8.85e-12  # permitividad del vac√≠o
eps = 5e-6  # precisi√≥n pedida

# En primer lugar creamos los arrays de phi y rho para aplicar el metodo de Jacobi
phi = np.zeros([M + 1, M + 1, M + 1], float)
phiprime = np.zeros([M + 1, M + 1, M + 1], float)

# Con slicinf definimos rho
rho = np.zeros([M + 1, M + 1, M + 1], float)
rho[0:26, 0:26, 0:26] = rho0
rho[-26:, 0:26, 0:26] = -rho0
rho[0:26, -26:, 0:26] = -rho0
rho[-26:, -26:, 0:26] = rho0
rho[0:26, 0:26, -26:] = -rho0
rho[-26:, 0:26, -26:] = rho0
rho[0:26, -26:, -26:] = rho0
rho[-26:, -26:, -26:] = -rho0

# Aplicamos el metodo de Jacobi
delta = 1.0
while delta > eps:
    # Calculamos los nuevos valores del potencial
    phiprime[1:M, 1:M, 1:M] = (phi[0:M - 1, 1:M, 1:M] + phi[2:M + 1, 1:M, 1:M] + phi[1:M, 0:M - 1, 1:M] + phi[1:M,
                                                                                                          2:M + 1,
                                                                                                          1:M] +
                               phi[1:M, 1:M, 0:M - 1] + phi[1:M, 1:M, 2:M + 1]) / 6 + rho[1:M, 1:M, 1:M] * a * a / (
                                          6 * epsilon0)
    # Estimamos el error como el m√°ximo del cambio entre dos estimaciones consecutivas
    delta = np.max(abs(phi - phiprime))
    # Intercambiamos los dos arrays de phi
    phi, phiprime = phiprime, phi

"""
Ejercicio 2: Representar el resultado obtenido en los planos ùë¶ = 35 cm e ùë¶ = 65 cm con imshow,
y el patr√≥n de color seismic.
"""
# Realizamos los plots, primero en el plano y=35cm
plt.imshow(phi[:, 35, :], cmap='seismic')
plt.title('Potencial en el plano y=35 cm')
plt.colorbar()
plt.show()

# Y ahora para y=65 cm
plt.imshow(phi[:, -35, :], cmap='seismic')
plt.title('Potencial en el plano y=65 cm')
plt.colorbar()
plt.show()

# Por simetr√≠a del problema y de los planos, el resultado obtenido es el contrario en las dos
# representaciones de densidad

"""
Ejercicio 3: Si ùúå var√≠a muy lentamente en el tiempo, podemos considerar un l√≠mite cuasiest√°tico en
el que calculemos ùúô(ùë°) haciendo uso √∫nicamente de la primera ley de Maxwell con distribuci√≥n
de carga ùúå(ùë°).
Calcular el potencial en el caso de una variaci√≥n adiab√°tica de las cargas de la forma ùúå(ùë°) =
ùúå0 cos(2ùúãùë°) (ùúå0 es el valor de la carga para cada bloque utilizado en el apartado 1), para 21
instantes de tiempos equiespaciados entre ùë° = 0 s y ùë° = 1 s.
"""

# Volvemos a crear los arrays, definimos los tiempos, y creamos un array (potentials) para almacenar
# los resultados obtenidos para el potencial en cada tiempo
tp = np.linspace(0, 1, 21)
phi = np.zeros([M + 1, M + 1, M + 1], float)
phiprime = np.zeros([M + 1, M + 1, M + 1], float)
rho = np.zeros([M + 1, M + 1, M + 1], float)
potentials = np.zeros([21, M + 1, M + 1, M + 1], float)

cont = 0  # Con esta variable pasaremos al siguiente valor del primer √≠ndice de potentials
# tras haber obtenido el resultado para la iteraci√≥n presente
# Procedemos igual que en el primer apartado, pero definiendo la densidad de carga en cada tiempo
for t in tp:
    fact = np.cos(2 * np.pi * t)
    rho[0:26, 0:26, 0:26] = rho0 * fact
    rho[-26:, 0:26, 0:26] = -rho0 * fact
    rho[0:26, -26:, 0:26] = -rho0 * fact
    rho[-26:, -26:, 0:26] = rho0 * fact
    rho[0:26, 0:26, -26:] = -rho0 * fact
    rho[-26:, 0:26, -26:] = rho0 * fact
    rho[0:26, -26:, -26:] = rho0 * fact
    rho[-26:, -26:, -26:] = -rho0 * fact
    # bucle
    delta = 1.0
    while delta > eps:
        # Calculamos los nuevos valores del potencial
        phiprime[1:M, 1:M, 1:M] = ((phi[0:M - 1, 1:M, 1:M] + phi[2:M + 1, 1:M, 1:M] + phi[1:M, 0:M - 1, 1:M] +
                                    phi[1:M, 2:M + 1, 1:M] + phi[1:M, 1:M, 0:M - 1] + phi[1:M, 1:M, 2:M + 1]) / 6 +
                                   rho[1:M, 1: M, 1: M] * a * a / (6 * epsilon0))
        # Estimamos el error como el m√°ximo del cambio entre dos estimaciones consecutivas
        delta = np.max(abs(phi - phiprime))
        # Intercambiamos los dos arrays de phi
        phi, phiprime = phiprime, phi

    # Guardamos el resultados en potentials
    potentials[cont] = phi
    # Aumentamos en 1 cont para guardar apropiadamente el c√°lculo para el siguiente tiempo
    cont += 1

"""
Ejercicio 4: Representar el potencial el√©ctrico en el plano ùë¶ = 35 cm con imshow, y el patr√≥n
de color seismic, para los resultados obtenidos en primer, s√©ptimo, noveno, decimos√©ptimo,
decimonoveno y √∫ltimo lugar. ¬øPor qu√© el resultado final difiere del inicial?
"""
# Realizamos las representaciones en el plano y=35cm en los tiempos pedidos
plt.imshow(potentials[0, :, 35, :], cmap='seismic')
plt.colorbar()
plt.show()
plt.imshow(potentials[6, :, 35, :], cmap='seismic')
plt.colorbar()
plt.show()
plt.imshow(potentials[8, :, 35, :], cmap='seismic')
plt.colorbar()
plt.show()
plt.imshow(potentials[16, :, 35, :], cmap='seismic')
plt.colorbar()
plt.show()
plt.imshow(potentials[18, :, 35, :], cmap='seismic')
plt.colorbar()
plt.show()
plt.imshow(potentials[-1, :, 35, :], cmap='seismic')
plt.colorbar()
plt.show()
